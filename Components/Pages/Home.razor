@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Biblioteca UAB</h1>

<div style="width: 100%; margin: 0 auto;">
    <input type="text" @bind="searchTerm" @oninput="OnSearchChanged"
           placeholder="Căutați după titlu, autor sau sumar..."
           style="margin-bottom: 10px; padding: 8px; width: 100%; box-sizing: border-box;" />

    @if (filteredCarti == null)
    {
        <p>Se încarcă datele...</p>
    }
    else if (!filteredCarti.Any())
    {
        <p>Nicio carte găsită.</p>
    }
    else
    {
        <table style="border-collapse: collapse; width: 100%;">
            <thead>
                <tr>
                    <th style="border: 1px solid black; text-align: left; padding: 8px;">Titlu</th>
                    <th style="border: 1px solid black; text-align: left; padding: 8px;">Autor</th>
                    <th style="border: 1px solid black; text-align: left; padding: 8px;">Sumar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var carte in filteredCarti)
                {
                    <tr>
                        <td style="border: 1px solid black; padding: 8px;">@carte.Titlu</td>
                        <td style="border: 1px solid black; padding: 8px;">@carte.Autor</td>
                        <td style="border: 1px solid black; padding: 8px;"><em>@carte.Sumar</em></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private class Carte
    {
        public string Titlu { get; set; } = default!;
        public string Autor { get; set; } = default!;
        public string Sumar { get; set; } = default!;
    }

    private List<Carte>? carti;
    private List<Carte>? filteredCarti;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        carti = await Http.GetFromJsonAsync<List<Carte>>(
            "https://api.biblioteca-uab.cloud/Carti/GetListCarti"
        );
        filteredCarti = carti;
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCarti = carti;
        }
        else
        {
            filteredCarti = carti?.Where(carte =>
                carte.Titlu.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                carte.Autor.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                carte.Sumar.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged();
    }
}
